{"version":3,"file":"grammars.js","sources":["../../src/grammars.ts"],"sourcesContent":["import { wireTmGrammars } from \"monaco-editor-textmate\";\nimport { Registry, type IGrammarDefinition } from \"monaco-textmate\";\n\nasync function dispatchGrammars(\n  scopeName: string\n): Promise<IGrammarDefinition> {\n  switch (scopeName) {\n    case \"source.vue\":\n      return {\n        format: \"json\",\n        content: await import(\"shiki/languages/vue.tmLanguage.json\"),\n      };\n    case \"source.ts\":\n      return {\n        format: \"json\",\n        content: await import(\"shiki/languages/typescript.tmLanguage.json\"),\n      };\n    case \"source.js\":\n      return {\n        format: \"json\",\n        content: await import(\"shiki/languages/javascript.tmLanguage.json\"),\n      };\n    case \"text.html.basic\":\n      return {\n        format: \"json\",\n        content: await import(\"shiki/languages/html.tmLanguage.json\"),\n      };\n    case \"source.css\":\n      return {\n        format: \"json\",\n        content: await import(\"shiki/languages/css.tmLanguage.json\"),\n      };\n    default:\n      return {\n        format: \"json\",\n        content: {\n          scopeName: \"source\",\n          patterns: [],\n        },\n      };\n  }\n}\n\nexport async function loadGrammars(\n  monaco: typeof import(\"monaco-editor-core\"),\n  editor: import(\"monaco-editor-core\").editor.IStandaloneCodeEditor\n) {\n  const registry = new Registry({\n    getGrammarDefinition: async (scopeName) => {\n      const dispatch = await dispatchGrammars(scopeName);\n      return JSON.parse(JSON.stringify(dispatch));\n    },\n  });\n  const grammars = new Map();\n  grammars.set(\"vue\", \"source.vue\");\n  grammars.set(\"javascript\", \"source.js\");\n  grammars.set(\"typescript\", \"source.ts\");\n  grammars.set(\"css\", \"source.css\");\n  grammars.set(\"html\", \"text.html.basic\");\n\n  for (const lang of grammars.keys()) {\n    monaco.languages.register({\n      id: lang,\n    });\n  }\n\n  await wireTmGrammars(monaco as any, registry, grammars, editor as any);\n}\n"],"names":[],"mappings":";;AAGA,eAAe,iBACb,WAC6B;AAC7B,UAAQ,WAAW;AAAA,IACjB,KAAK;AACI,aAAA;AAAA,QACL,QAAQ;AAAA,QACR,SAAS,MAAM,OAAO,qBAAqC;AAAA,MAAA;AAAA,IAE/D,KAAK;AACI,aAAA;AAAA,QACL,QAAQ;AAAA,QACR,SAAS,MAAM,OAAO,4BAA4C;AAAA,MAAA;AAAA,IAEtE,KAAK;AACI,aAAA;AAAA,QACL,QAAQ;AAAA,QACR,SAAS,MAAM,OAAO,4BAA4C;AAAA,MAAA;AAAA,IAEtE,KAAK;AACI,aAAA;AAAA,QACL,QAAQ;AAAA,QACR,SAAS,MAAM,OAAO,sBAAsC;AAAA,MAAA;AAAA,IAEhE,KAAK;AACI,aAAA;AAAA,QACL,QAAQ;AAAA,QACR,SAAS,MAAM,OAAO,qBAAqC;AAAA,MAAA;AAAA,IAE/D;AACS,aAAA;AAAA,QACL,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,WAAW;AAAA,UACX,UAAU,CAAC;AAAA,QACb;AAAA,MAAA;AAAA,EAEN;AACF;AAEsB,eAAA,aACpB,QACA,QACA;AACM,QAAA,WAAW,IAAI,SAAS;AAAA,IAC5B,sBAAsB,OAAO,cAAc;AACnC,YAAA,WAAW,MAAM,iBAAiB,SAAS;AACjD,aAAO,KAAK,MAAM,KAAK,UAAU,QAAQ,CAAC;AAAA,IAC5C;AAAA,EAAA,CACD;AACK,QAAA,+BAAe;AACZ,WAAA,IAAI,OAAO,YAAY;AACvB,WAAA,IAAI,cAAc,WAAW;AAC7B,WAAA,IAAI,cAAc,WAAW;AAC7B,WAAA,IAAI,OAAO,YAAY;AACvB,WAAA,IAAI,QAAQ,iBAAiB;AAE3B,aAAA,QAAQ,SAAS,QAAQ;AAClC,WAAO,UAAU,SAAS;AAAA,MACxB,IAAI;AAAA,IAAA,CACL;AAAA,EACH;AAEA,QAAM,eAAe,QAAe,UAAU,UAAU,MAAa;AACvE;"}